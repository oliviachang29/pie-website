<div class="text__section">
    <h4>Mechanical</h4>
    <p>In the beginning, we ran into a lot of issues with both parts breaking and interference issues. The issue with parts breaking was mainly because we were doing quick prototyping to give electrical and software a product to start testing with, but because things were breaking it was difficult for them to do real testing. The parts that broke were the timing belts and the shaft bending. We were gluing timing belts together for a while since we had to wait for the ordered continuous timing belts to arrive. In hindsight, it would’ve been better to order the timing belts first and design around the dimensions of the belts that we ordered, that we wouldn’t have to deal with the belts constantly breaking for the first prototype and this would’ve allowed electrical and software to get a lot more done in the beginning. The interference issues were due to not paying close attention to the CAD assembly, so we had to refabricate some parts later on.</p>
    <p>Another thing we learned was that it’s easy to misjudge how long something will take. In some instances, we planned to have the mechanical side of things done by a certain deadline, but it would take a lot longer than expected so the entire timeline had to be pushed to accommodate. In the end, we learned that it’s better to allocate more time than expected, especially when fabricating and assembling.</p>
</div>

<div class="text__section">
    <h4>Electrical</h4>
    <p>One thing we learned was the importance of using the right parts for the job. We started out with DC motors with too much torque, so they overshot the target more frequently than not, making the encoders less helpful in determining position than we thought they would be. When we switched to using stepper motors, it became a lot easier from a software standpoint since they are more designed to move to specific positions. However, these motors had less torque than anticipated. The accuracy of their positions worsened when they started to lose steps combatting the friction of the ball against the sand. If we could redo this project, we would have specced out the right motors more thoroughly at the start. </p>
    <p>In a similar vein, we had trouble finding the right drivers for our motors since it was a rushed switch. We burnt out two different types of boards before finding drivers that worked. This is another case where we would have benefited from deciding on the right parts earlier. </p>
</div>

<div class="text__section">
    <h4>Software</h4>
    <p>As a stretch goal, we initially hoped to have a web server that users could input their own patterns to for the sand table to draw. In the end, we ended up with only 3 different patterns: circles, spirals, and roses, without the web server. </p>
    <p>One of the biggest takeaways from the software development in this project was that no matter how well the code works in theory, it needs to be adjusted to match the constraints of the mechanical and electrical system. For example, in the first two sprints when we were writing code to move the DC motors to certain points using the motor encoders, we found that the motors would overshoot the target position and end up oscillating back and forth even as it attempted to draw a very simple pattern like a circle. Although our algorithm for moving the motors to the right positions was correct, we had to adjust the motor speeds and angle step size because the motors we were using could not handle accuracy when there was abrupt acceleration.</p>
</div>
